uniform float4x4 ViewProj;
uniform texture2d image;

uniform texture2d target;
uniform float4 color;
uniform float2 mul_val;
uniform float2 add_val;

sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

struct VertDataIn {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertDataOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
	float2 uv2 : TEXCOORD1;
};

VertDataOut VSDefault(VertDataIn v_in)
{
	VertDataOut vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	vert_out.uv2 = v_in.uv * mul_val + add_val;
	return vert_out;
}

float4 PSSubtractImageRGBA(VertDataOut v_in) : TARGET
{
	float4 currentColor = image.Sample(textureSampler, v_in.uv);
	
	if(v_in.uv.x <= 0.5f && v_in.uv.y <= 0.5f) {
		float baseAlpha = 1.0 - color.a;
		float4 alphaQuadrant = image.Sample(textureSampler, float2(v_in.uv.x + 0.5f, v_in.uv.y));
		float currentAlpha = (((alphaQuadrant.r + alphaQuadrant.g + alphaQuadrant.b) / 3.0) - baseAlpha) / (1.0 - baseAlpha);
		currentColor.rgb /= currentAlpha;
		currentColor.a *= currentAlpha;
	}
	
	return currentColor;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSSubtractImageRGBA(v_in);
	}
}
